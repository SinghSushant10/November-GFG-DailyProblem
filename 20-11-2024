#Majority Element IIMajority Element II
#You are given an array of integer arr[] where each number represents a vote to a candidate.
Return the candidates that have votes greater than one-third of the total votes, If there's not a majority vote, return an empty array. 
Note: The answer should be returned in an increasing format.
Examples:
Input: arr[] = [2, 1, 5, 5, 5, 5, 6, 6, 6, 6, 6]
Output: [5, 6]
Explanation: 5 and 6 occur more n/3 times.
Input: arr[] = [1, 2, 3, 4, 5]
Output: []
Explanation: no candidate occur more than n/3 times.

TC:O(n) SC: (1)

class Solution {
    // Function to find the majority elements in the array
    public List<Integer> findMajority(int[] nums) {

        int n=nums.length;
      // Initialize two potential candidates and their counts
        int cand1=Integer.MIN_VALUE,cand2=Integer.MIN_VALUE;
        int count1=0,count2=0;
        
      // First pass: Identify two majority candidates
        for(int i=0;i<n;i++){
            if(nums[i]==cand1) {
                count1++;
            }
            else if(nums[i]==cand2){
                count2++;
            }
            else if(count1==0){
                cand1=nums[i];
                count1=1;
            }
            else if(count2==0){
                cand2=nums[i];
                count2=1;
            }
            else{
                count1--;
                count2--;
            }
        }
     // Verify the candidates by counting their actual occurrences
        int vote1=0,vote2=0;
        for(int x:nums){
            if(x==cand1) vote1++;
            if(x==cand2) vote2++;
        }
        
        List<Integer> ans = new ArrayList<>();
        if(vote1>n/3) ans.add(cand1);
        if(vote2>n/3) ans.add(cand2);
// Ensure the output list is sorted in ascending order if it contains two elements
        if(ans.size()==2 && ans.get(0)>ans.get(1)) {
           int temp=ans.get(0);
           ans.set(0,ans.get(1));
           ans.set(1,temp);
         
        }
        return ans;
    }
}
