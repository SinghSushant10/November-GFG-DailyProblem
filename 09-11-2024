#Minimum sum
Input: arr[] = [6, 8, 4, 5, 2, 3]
Output: 604
Explanation: The minimum sum is formed by numbers 358 and 246.


class Solution {
    String minSum(int[] arr) {
        // code here
        int n = arr.length;
        Arrays.sort(arr);
        StringBuilder num1 = new StringBuilder(); 
        StringBuilder num2 = new StringBuilder();
        for(int i=0; i<n ;i++){
            if(i%2==0){
                num1.append(""+arr[i]); // Append element to num1 for even index
            }
            else{
                num2.append(""+arr[i]);  // Append element to num2 for odd index
            }
        }
        StringBuilder ans = new StringBuilder();
    // Initialize indexes for the last characters of s1 and s2, and carry for addition
        int m = num2.length();
            n = num1.length();
            String s1 = num1.toString();
            String s2 = num2.toString();
            int i=n-1,  j=m-1 , carry=0;
            while(i>-1||j>-1||carry!=0){
                int temp1 = i>-1? s1.charAt(i)-'0':0;  // Character at i in s1 or 0 if out of bounds
                int temp2 = j>-1? s2.charAt(j)-'0':0; // Character at j in s2 or 0 if out of bounds
                int num = temp1+temp2+carry;
        // Append the last digit of the result to ans and update the carry
                ans.append(""+num%10);
                carry = num/10;
                i--;
                j--;
            }
        // Reverse ans to get the correct order of the sum
            ans.reverse();
      // Convert ans to a string and remove leading zeroes
            s1=ans.toString();
            for(i=0;i<s1.length();i++){
                if(s1.charAt(i)!='0')break;
            }
        // Return the substring from the first non-zero character onward
            return s1.substring(i);
    }
}
