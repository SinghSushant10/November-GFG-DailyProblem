#Nearly sorted
Given an array arr[], where each element is at most k away from its target position, you need to sort the array optimally.
Note: You need to change the given array arr[] in place.

Examples:

Input: arr[] = [6, 5, 3, 2, 8, 10, 9], k = 3
Output: [2, 3, 5, 6, 8, 9, 10]
Explanation: The sorted array will be 2 3 5 6 8 9 10
TC : O(nlogk) SC:O(k)
class Solution {
    // Non-static method, so you need to call it on an instance of the class
    public void nearlySorted(int[] arr, int k) {
        // code
        PriorityQueue<Integer>pq=new PriorityQueue<>();
        int j=0, n=arr.length;
        for(int i=0;i<n;i++){
            pq.offer(arr[i]);
            if(i>k){
                arr[j++]=pq.poll();  // Place the smallest element in the heap into 'arr'
            }
        }
        while(!pq.isEmpty()){
            arr[j++]=pq.poll();
        }
    }
}
