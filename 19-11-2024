#Next Permutation 
#Given an array of integers arr[] representing a permutation, implement the next permutation that rearranges the numbers into the lexicographically next greater permutation. 
If no such permutation exists, rearrange the numbers into the lowest possible order (i.e., sorted in ascending order). 
Note - A permutation of an array of integers refers to a specific arrangement of its elements in a sequence or linear order.
Examples:
Input: arr = [2, 4, 1, 7, 5, 0]
Output: [2, 4, 5, 0, 1, 7]
Explanation: The next permutation of the given array is {2, 4, 5, 0, 1, 7}.

TC(n)  SC(1)

class Solution {
    static void reverse(int []arr,int i,int j){
        while(i<j){
        int temp=arr[i];
        arr[i]=arr[j];
        arr[j]=temp;
        i++;
        j--;
    }
}
    
    
    void nextPermutation(int[] arr) {
        // code here
        int n = arr.length;
        int index=-1;  // Index to find the "pivot" point
        
   // Step 1: Find the first decreasing element from the end
        for(int i=n-1;i>=1;i--){
            if(arr[i-1]<arr[i]){   //1<7
                index=i-1;
                break;
            }
        }
    // Step 2: If no such element is found, the array is the largest permutation
        if(index==-1){
            reverse(arr,0,n-1); // Reverse the array to get the smallest permutation
            return;
        }
   // Step 3: Find the smallest element larger than `arr[index]` to its right
        for(int i=n-1;i>index;i--){
            if(arr[i]>arr[index]){
                int temp=arr[i];
                arr[i]=arr[index];
                arr[index]=temp;
                break;
            }
        }
     // Step 4: Reverse the subarray to the right of `index` to get the smallest order
        reverse(arr,index+1,n-1);
    }
}
