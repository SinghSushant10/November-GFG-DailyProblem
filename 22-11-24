#Stock Buy and Sell â€“ Max one Transaction Allowed
Given an array prices[] of length n, representing the prices of the stocks on different days. 
The task is to find the maximum profit possible by buying and selling the stocks on different days when at most one transaction is allowed. 
Here one transaction means 1 buy + 1 Sell. If it is not possible to make a profit then return 0.
Note: Stock must be bought before being sold.
Examples:
Input: prices[] = [7, 10, 1, 3, 6, 9, 2]
Output: 8
Explanation: You can buy the stock on day 2 at price = 1 and sell it on day 5 at price = 9. Hence, the profit is 8

TC:O(n) SC:O(1)
class Solution {
    public int maximumProfit(int prices[]) {
        // Code here
      int n=prices.length;
      int profit=0 , buy=prices[0]; // Assume the stock is bought on the first day.
      for(int i=0;i<n-1;i++){
           // If the price on the next day is less than or equal to the current buying price,
           // update the buying price to the lower value.
          if(prices[i+1]<=buy){
              buy=prices[i+1];
          }
          else{
              // Otherwise, calculate the potential profit by selling on the next day
              // and update the maximum profit if this profit is greater than the previous maximum.
              profit=Math.max(profit,prices[i+1]-buy);
          }
      }
      return profit;
      
    }
}
