#Max Circular Subarray Sum
#Given an array of integers arr[] in a circular fashion. Find the maximum subarray sum that we can get if we assume the array to be circular.
Examples:
Input: arr[] = [8, -8, 9, -9, 10, -11, 12]
Output: 22
Explanation: Starting from the last element of the array, i.e, 12, and moving in a circular fashion, we have max subarray as 12, 8, -8, 9, -9, 10, which gives maximum sum as 22.

TC:O(n) SC:(1)

class Solution {

    // a: input array
    // n: size of array
    // Function to find maximum circular subarray sum.
    public int circularSubarraySum(int arr[]) {

        // Your code here
        int n=arr.length;
       // minSum: tracks the minimum sum of a subarray (to find the "non-contributing" subarray)
        int minSum=Integer.MAX_VALUE;
       //maxSum: tracks the maximum sum of a subarray
        int maxSum=Integer.MIN_VALUE;
        // sum1: stores the sum of the current subarray for maxSum calculation
        // sum2: stores the sum of the current subarray for minSum calculation
        // TotalSum: stores the sum of all elements in the array
        int sum1=0,sum2=0,TotalSum=0;
        for(int i=0;i<n;i++){
            TotalSum+=arr[i];
            sum1+=arr[i];
            sum2+=arr[i];
            if(sum1<0) sum1=0;
            if(sum2>0) sum2=0;
            maxSum=Math.max(maxSum,sum1);
            minSum=Math.min(minSum,sum2);
        }
        return Math.max(maxSum,TotalSum-minSum);
    }
}
